version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-alatar_prod}
      POSTGRES_USER: ${POSTGRES_USER:-produser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-prodpass} # Load from .env in production!
    ports:
      - "5432:5432" # Consider not exposing DB directly in real prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI (consider restricting access)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-produser}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-prodpass} # Load from .env in production!
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
        test: rabbitmq-diagnostics -q check_running
        interval: 30s
        timeout: 10s
        retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    # Command is defined in the Dockerfile's final stage CMD
    # No command override needed here unless for specific prod adjustments
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      # Load all necessary env vars from .env file
      # Ensure DATABASE_URL, RABBITMQ_URL etc. are correctly set for prod
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://${POSTGRES_USER:-produser}:${POSTGRES_PASSWORD:-prodpass}@db:5432/${POSTGRES_DB:-alatar_prod}}
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://${RABBITMQ_DEFAULT_USER:-produser}:${RABBITMQ_DEFAULT_PASS:-prodpass}@rabbitmq:5672/}
      # Add other production-specific ENV VARS (e.g., LOG_LEVEL=INFO)
      LOG_LEVEL: INFO
      # Ensure OPENAI_API_KEY, SHOPIFY_API_KEY etc are loaded via .env or secrets management
    env_file:
      - .env # Assumes a .env file is present in the same directory
    restart: unless-stopped
    # Add healthcheck if not defined in Dockerfile or needs override
    # healthcheck: defined in Dockerfile

  worker:
    build:
      context: .
      dockerfile: Dockerfile # Use the same image build as the app
    command: python worker.py # Override CMD to run the worker script
    depends_on:
      rabbitmq:
        condition: service_healthy
      db: # Worker might need DB access too
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://${POSTGRES_USER:-produser}:${POSTGRES_PASSWORD:-prodpass}@db:5432/${POSTGRES_DB:-alatar_prod}}
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://${RABBITMQ_DEFAULT_USER:-produser}:${RABBITMQ_DEFAULT_PASS:-prodpass}@rabbitmq:5672/}
      LOG_LEVEL: INFO
      # Add any other ENV VARS needed by the worker
    env_file:
      - .env
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
