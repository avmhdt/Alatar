"""Add core data tables

Revision ID: 64f98764f76c
Revises: 033cc4d830a0
Create Date: 2025-05-01 18:23:21.350033

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "64f98764f76c"
down_revision: str | None = "033cc4d830a0"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "analysis_requests",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("prompt", sa.Text(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "CANCELLED",
                name="analysisrequeststatus",
            ),
            nullable=False,
        ),
        sa.Column("result_summary", sa.Text(), nullable=True),
        sa.Column(
            "result_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "agent_state", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_analysis_requests_status"),
        "analysis_requests",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_analysis_requests_user_id"),
        "analysis_requests",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "linked_accounts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("account_type", sa.String(length=50), nullable=False),
        sa.Column("account_name", sa.String(length=255), nullable=True),
        sa.Column("encrypted_credentials", sa.LargeBinary(), nullable=False),
        sa.Column("scopes", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_linked_accounts_account_type"),
        "linked_accounts",
        ["account_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_linked_accounts_user_id"), "linked_accounts", ["user_id"], unique=False
    )
    op.create_table(
        "agent_tasks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("analysis_request_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("task_type", sa.String(length=100), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "RETRYING",
                "CANCELLED",
                name="agenttaskstatus",
            ),
            nullable=False,
        ),
        sa.Column("input_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "output_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("logs", sa.Text(), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["analysis_request_id"],
            ["analysis_requests.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_agent_tasks_analysis_request_id"),
        "agent_tasks",
        ["analysis_request_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_agent_tasks_status"), "agent_tasks", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_agent_tasks_user_id"), "agent_tasks", ["user_id"], unique=False
    )
    op.create_table(
        "cached_shopify_data",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("linked_account_id", sa.UUID(), nullable=False),
        sa.Column("cache_key", sa.String(length=512), nullable=False),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "cached_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["linked_account_id"],
            ["linked_accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_cached_shopify_data_cache_key"),
        "cached_shopify_data",
        ["cache_key"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cached_shopify_data_cached_at"),
        "cached_shopify_data",
        ["cached_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cached_shopify_data_expires_at"),
        "cached_shopify_data",
        ["expires_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cached_shopify_data_linked_account_id"),
        "cached_shopify_data",
        ["linked_account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cached_shopify_data_user_id"),
        "cached_shopify_data",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "proposed_actions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("analysis_request_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("linked_account_id", sa.UUID(), nullable=False),
        sa.Column("action_type", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("parameters", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PROPOSED",
                "APPROVED",
                "REJECTED",
                "EXECUTING",
                "EXECUTED",
                "FAILED",
                name="proposedactionstatus",
            ),
            nullable=False,
        ),
        sa.Column("execution_logs", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["analysis_request_id"],
            ["analysis_requests.id"],
        ),
        sa.ForeignKeyConstraint(
            ["linked_account_id"],
            ["linked_accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_proposed_actions_analysis_request_id"),
        "proposed_actions",
        ["analysis_request_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_proposed_actions_linked_account_id"),
        "proposed_actions",
        ["linked_account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_proposed_actions_status"), "proposed_actions", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_proposed_actions_user_id"),
        "proposed_actions",
        ["user_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_proposed_actions_user_id"), table_name="proposed_actions")
    op.drop_index(op.f("ix_proposed_actions_status"), table_name="proposed_actions")
    op.drop_index(
        op.f("ix_proposed_actions_linked_account_id"), table_name="proposed_actions"
    )
    op.drop_index(
        op.f("ix_proposed_actions_analysis_request_id"), table_name="proposed_actions"
    )
    op.drop_table("proposed_actions")
    op.drop_index(
        op.f("ix_cached_shopify_data_user_id"), table_name="cached_shopify_data"
    )
    op.drop_index(
        op.f("ix_cached_shopify_data_linked_account_id"),
        table_name="cached_shopify_data",
    )
    op.drop_index(
        op.f("ix_cached_shopify_data_expires_at"), table_name="cached_shopify_data"
    )
    op.drop_index(
        op.f("ix_cached_shopify_data_cached_at"), table_name="cached_shopify_data"
    )
    op.drop_index(
        op.f("ix_cached_shopify_data_cache_key"), table_name="cached_shopify_data"
    )
    op.drop_table("cached_shopify_data")
    op.drop_index(op.f("ix_agent_tasks_user_id"), table_name="agent_tasks")
    op.drop_index(op.f("ix_agent_tasks_status"), table_name="agent_tasks")
    op.drop_index(op.f("ix_agent_tasks_analysis_request_id"), table_name="agent_tasks")
    op.drop_table("agent_tasks")
    op.drop_index(op.f("ix_linked_accounts_user_id"), table_name="linked_accounts")
    op.drop_index(op.f("ix_linked_accounts_account_type"), table_name="linked_accounts")
    op.drop_table("linked_accounts")
    op.drop_index(op.f("ix_analysis_requests_user_id"), table_name="analysis_requests")
    op.drop_index(op.f("ix_analysis_requests_status"), table_name="analysis_requests")
    op.drop_table("analysis_requests")
    # ### end Alembic commands ###
